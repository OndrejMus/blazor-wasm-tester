@page "/TeamPicker"

<h3>Team picker</h3>

<label for="teamCount">Team count:</label>
<input type="number" min="2" id="teamCount" name="teamCount" @bind="TeamCount"><br><br>

<form @onsubmit=AddMember autocomplete="off">  
    <label for="member">Member name:</label>
    <input type="text" @ref="refMemberName" placeholder="Set member name" id="member" @bind="MemberName"><br>

    <label for="memberRating">Member rating:</label>
    <input type="number" id="memberRating" @bind="MemberRating"><br><br>

    <button class="button-4" type="submit">Add member</button>
</form>



<br>
<button class="button-4" type="button" @onclick="@SetTeams">Randomize teams</button>
<button class="button-4" type="button" @onclick="@SetTeamsToCloseRating">Set teams by rating</button>
<br>
<br>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <br><br>
    <label class="errorMessage">@ErrorMessage</label>
    <br><br>
}


<h4>Members</h4>
<div class="flex-container">
    @foreach (var member in Members)
    {
        <div>@member.Name (@member.Rating)<br>
            <button class="button-4" @onclick="@(e => DeleteMember(member))">X</button>
        </div>
    }
</div>

@*<table class="table">
    <tr>
        <th>Position</th>
        <th>Members</th>
    </tr>
    @foreach (var member in Members)
    {
        <tr>
            <td>@(Members.IndexOf(member)+1)</td>
            <td>@member</td>
            <td><button @onclick="@(e => Members.Remove(member))">X</button></td>
        </tr>
    }
</table>*@


<br><br>

<h4>Teams</h4>

<table class="table">
   @*  <tr>
        <th>Teams</th>
    </tr> *@
    @{int xx = 0;}
    @foreach (var team in Teams)
    {
        <tr class="tr">
            <td>
                <h5>Team @(xx + 1) (@(team.Count) members, @GetTeamRating(team) total rating)</h5>
                <button class="button-4" @onclick="() => SetWiningTeam(team)">Win!</button>
                <div class="flex-container">
                    @foreach (var member in team)
                    {
                        <div>
                            @member.Name (@member.Rating)<br>
                            @* <button class="button-4" @onclick="@(e => Members.Remove(member))">X</button> *@
                        </div>
                    }
                </div>
            </td>
        </tr>
        xx++;
    }
</table>




@code {
    public List<Member> Members = new List<Member>();
    public int TeamCount = 2;
    public string ErrorMessage = "";

    public string MemberName = "";
    public int MemberRating = 1000;

    public int RatingPerWin = 100;
    public int RatingPerLoss = -100;

    ElementReference refMemberName;

    public List<List<Member>> Teams = new List<List<Member>>();

    // public void CheckKeyPress(KeyboardEventArgs e)
    // {
    //     if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //     {
    //             AddMember();
    //     }
    // }

    public void AddMember()
    {
        ErrorMessage = "";
        if (string.IsNullOrWhiteSpace(MemberName))
        {
            ErrorMessage = "Please provide member name.";
            return;
        }

        if (Members.Exists(x => x.Name==MemberName))
        {
            ErrorMessage = "This name already exists.";
            return;
        }

        Members.Add(new Member(MemberName, MemberRating));
        MemberName = "";
        MemberRating = 1000;
        // StateHasChanged();

        // SetTeams();

        refMemberName.FocusAsync();
    }
    public void DeleteMember(Member member)
    {
        Members.Remove(member);
        // SetTeams();
    }
    // public string TeamToString(List<string> team)
    // {
    //     if (team.Count == 0)
    //     {
    //         return "";
    //     }

    //     string result = "";
    //     foreach (var member in team)
    //     {
    //         result += member+",";
    //     }
    //     result = result.Substring(0, result.Length - 1);
    //     return result;
    // }

    public int GetTeamRating(List<Member> team)
    {
        int teamRating = 0;
        foreach (var member in team)
        {
            teamRating += member.Rating;
        }
        return teamRating;
    }

    public void SetWiningTeam(List<Member> winningTeam)
    {
        foreach (var member in winningTeam)
        {
            member.Rating += RatingPerWin;
        }  

        foreach (var team in Teams)
        {
            if (team != winningTeam)
            {
                foreach (var member in team)
                {
                    member.Rating += RatingPerLoss;
                }
            }
        }

    }

    public void SetTeams()
    {
        if (!ValidateInput())
        {
            return;
        }

        Teams = new List<List<Member>>();

        // set teams
        for (int i = 0; i < TeamCount; i++)
        {
            Teams.Add(new List<Member>());
        }

        // add members
        List<Member> tempMembers = Members.ToList();

        int iterator = 0;
        Random rand = new Random();

        while (tempMembers.Count > 0)
        {
            if (iterator > Teams.Count-1)
            {
                iterator = 0;
            }

            int randomMember = rand.Next(0, tempMembers.Count);
            Teams[iterator].Add(tempMembers[randomMember]);
            tempMembers.RemoveAt(randomMember);

            iterator++;
        }

        // StateHasChanged();
    }

    public void SetTeamsToCloseRating()
    {
        if (!ValidateInput())
        {
            return;
        }

        Teams = new List<List<Member>>();

        // set teams
        for (int i = 0; i < TeamCount; i++)
        {
            Teams.Add(new List<Member>());
        }

        // add members
        List<Member> tempMembers = Members.ToList();

        while (tempMembers.Count > 0)
        {
            Member topRatingMember = tempMembers.MaxBy(x => x.Rating);

            List<Member> lowestScoreTeam = Teams.MinBy(x => GetTeamRating(x));

            lowestScoreTeam.Add(topRatingMember);
            tempMembers.Remove(topRatingMember);
        }
    }

    public bool ValidateInput()
    {
        ErrorMessage = "";
        if (Members.Count < 1)
        {
            ErrorMessage = "Provide some members.";
            return false;
        }

        if (TeamCount < 2)
        {
            ErrorMessage = "Set at least two teams.";
            return false;
        }

        return true;
    }

    public class Member
    {
        public string Name { get; set; }
        public int Rating { get; set; } = 1000;

        public Member(string name)
        {
            Name = name;
        }
        public Member(string name, int rating)
        {
            Name = name;
            Rating = rating;
        }
    }

}
