@page "/classPicker"
@inject ISnackbar Snackbar


<MudText Typo="Typo.h4">Classes</MudText>
<MudPaper Class="d-flex flex-wrap gap-4" Elevation="3">
    @foreach (var item in classSelections)
    {
        <BlazorWasmTester.Components.WowClassPicker @bind-Selected="@item.Selected" Class=@item.SelectedClass ></BlazorWasmTester.Components.WowClassPicker>
    }
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SelectAllClasses">Select all</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeselectAllClasses">Deselect all</MudButton>
</MudPaper>

<MudText Typo="Typo.h4">Races</MudText>
<MudPaper Class="d-flex flex-wrap gap-4" Elevation="3">
    @foreach (var item in raceSelections)
    {
        <BlazorWasmTester.Components.WowRacePicker @bind-Selected="@item.Selected" Race="@item.SelectedRace" ></BlazorWasmTester.Components.WowRacePicker>
    }
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SelectAllRaces">Select all</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeselectAllRaces">Deselect all</MudButton>
</MudPaper>


<MudText Typo="Typo.h4">Combination</MudText>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SelectCombination">Pick combination</MudButton>
@* <MudPaper Class="d-flex flex-wrap gap-4" Elevation="3"> *@
    <MudTextField @bind-Value="@selectedRace.Name" Label="Race" ReadOnly="true" Variant="Variant.Outlined" />
    <MudTextField @bind-Value="@selectedClass.Name" Label="Class" ReadOnly="true" Variant="Variant.Outlined" />    
@* </MudPaper> *@



@code{
    Model.WowClassPickerModel.Class war = Model.WowClassPickerModel.Classes[((int)Model.WowClassPickerModel.ClassNames.Warrior)];

    public List<ClassSelectionStatus> classSelections = new List<ClassSelectionStatus>();
    public List<RaceSelectionStatus> raceSelections = new List<RaceSelectionStatus>();

    public Model.WowClassPickerModel.Class selectedClass = new Model.WowClassPickerModel.Class();
    public Model.WowClassPickerModel.Race selectedRace = new Model.WowClassPickerModel.Race();

    protected override void OnInitialized()
    {
        foreach (var item in Model.WowClassPickerModel.Classes)
        {
            classSelections.Add(new ClassSelectionStatus() { Selected = false, SelectedClass = item });
        }

        foreach (var item in Model.WowClassPickerModel.Races)
        {
            raceSelections.Add(new RaceSelectionStatus() { Selected = false, SelectedRace = item });
        }

        base.OnInitialized();
    }

    public void SelectCombination()
    {
        Random random = new Random();
        List<ClassSelectionStatus> selectedClasses = classSelections.Where(x => x.Selected == true).ToList();
        List<RaceSelectionStatus> selectedRaces = raceSelections.Where(x => x.Selected == true).ToList();
        // selectedClass = selectedClasses[random.Next(0, selectedClasses.Count)].SelectedClass;

        var combinationsFilteredByClassxxx = Model.WowClassPickerModel.xx
        .Where(x => selectedClasses.Any(y => y.SelectedClass.Name == x.Item1)).ToList();

        var combinationsFilteredByRacexxx = combinationsFilteredByClassxxx
        .Where(x => selectedRaces.Any(y => y.SelectedRace.Name == x.Item2)).ToList();

        if (combinationsFilteredByRacexxx.Count() > 0)
        {
            int index = random.Next(0, combinationsFilteredByRacexxx.Count());

            selectedClass = Model.WowClassPickerModel.Classes.Single(x => x.Name == combinationsFilteredByRacexxx[index].Item1);
            selectedRace = Model.WowClassPickerModel.Races.Single(x => x.Name == combinationsFilteredByRacexxx[index].Item2);
        }
        else
        {
            Snackbar.Add("No valid combination found.");
            selectedClass = new Model.WowClassPickerModel.Class();
            selectedRace = new Model.WowClassPickerModel.Race();
        }
        // List<RaceSelectionStatus> selectedRaces = raceSelections.Where(x => x.Selected == true 
        //     && Model.WowClassPickerModel.ClassRaceCombinations.Where(y => y.Key == selectedClass.Name && y.Value == x.SelectedRace.Name).ToList();
        // selectedRace = selectedRaces[random.Next(0, selectedRaces.Count)].SelectedRace;
    }

    public void SelectAllClasses()
    {
        foreach (var item in classSelections)
        {
            item.Selected = true;
        }
    }

    public void SelectAllRaces()
    {
        foreach (var item in raceSelections)
        {
            item.Selected = true;
        }
    }

    public void DeselectAllClasses()
    {
        foreach (var item in classSelections)
        {
            item.Selected = false;
        }
    }

    public void DeselectAllRaces()
    {
        foreach (var item in raceSelections)
        {
            item.Selected = false;
        }
    }

    public class ClassSelectionStatus
    {
        public bool Selected = false;
        public Model.WowClassPickerModel.Class? SelectedClass;
    }

    public class RaceSelectionStatus
    {
        public bool Selected = false;
        public Model.WowClassPickerModel.Race? SelectedRace;
    }


}
